# $MirOS: src/bin/mksh/dot.mkshrc,v 1.24 2007/10/25 14:54:00 tg Exp $
#-
# Copyright (c) 2007
#	Thorsten Glaser <tg@mirbsd.de>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# Advertising materials mentioning features or use of this work must
# display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# sample mksh initialisation file for interactive shells

: ${EDITOR:=/bin/ed} ${TERM:=vt100} ${HOSTNAME:=$(ulimit -c 0;hostname -s 2>&-)}
[[ $HOSTNAME = @(localhost|*([	 ])) ]] && HOSTNAME=$(ulimit -c 0;hostname 2>&-)
: ${HOSTNAME:=nil}; PS1='#'; [[ "$(ulimit -c 0; id -u 2>&-)" -eq 0 ]] || PS1='$'
function precmd {
	typeset -Ui10 e=$?

	(( e )) && print -n "$e|"
}
#PS1="$(print -n '\033[1;34m')$PS1$(print -n '\033[00m')"
PS1='$(precmd)${USER:=$(ulimit -c 0;id -un 2>&- || print \?)}@${HOSTNAME%%.*}:$(
	typeset pfx=~ wd=${PWD:-?}
	typeset -Ui n=${COLUMNS:-80}/3; (( n = n < 7 ? 7 : n ))
	[[ ${wd#$pfx} = $wd || $pfx = ?(/) ]] || wd=\~${wd#$pfx}
	pfx=; while (( (${#pfx} + ${#wd}) > n )); do
		if [[ $wd = */* ]]; then
			pfx=.../
			wd=${wd#*/}
		else
			pfx=...
			wd=${wd#?????}
		fi
	done;
	print -n "\033[1;34m" 
	print -nr -- "$pfx$wd"
	print -n "\033[00m" ) '"$PS1 "
PS1="$(print -n '\033[1;32m')$PS1"	# allow colour codes, framed with ^A
export EDITOR HOSTNAME LESSHISTFILE=- MKSH=$(whence -p mksh) PS1 TERM USER
alias l='/bin/ls -F'
alias la='l -a'
alias ll='l -l'
alias lo='la -lo'
alias ls='l --color'
alias ..='cd ..'

LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
export LS_COLORS

set -o viraw  #enable TAB autocompletion

PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin/:/usr/local/sbin
export PATH

if [ ! -f ~/.dirs ]; then  # if doesn't exist, create it
    touch ~/.dirs
fi

alias show='cat ~/.dirs'
save(){
    sed "/!$/d" ~/.dirs > ~/.dirs1 
	mv ~/.dirs1 ~/.dirs 
	echo "$@"=\"`pwd`\" >> ~/.dirs
	source ~/.dirs  
}
source ~/.dirs  # Initialization for the above 'save' facility: source the .sdirs file
#shopt -s cdable_vars # set the bash option so that no '$' is required when using the above facility




alias which='whence -p'
whence -p rot13 >&- || alias rot13='tr [A-Za-z] [N-ZA-Mn-za-m]'
whence -p hd >&- || function hd {
	hexdump -e '"%08.8_ax  " 8/1 "%02X " " - " 8/1 "%02X "' \
	    -e '"  |" "%_p"' -e '"|\n"' "$@"
}

# Berkeley C shell compatible dirs, popd, and pushd functions
# Z shell compatible chpwd() hook, used to update DIRSTACK[0]
DIRSTACKBASE=$(readlink -nf ~/. 2>&- || print -nr -- "$HOME")
typeset -r DIRSTACKBASE
set -A DIRSTACK
function chpwd {
	DIRSTACK[0]=$(readlink -nf . 2>&- || print -nr -- "$PWD")
	[[ ${DIRSTACK[0]#$DIRSTACKBASE} = ${DIRSTACK[0]} ]] || \
	    DIRSTACK[0]=\~${DIRSTACK[0]#$DIRSTACKBASE}
	:
}
chpwd .
function cd {
	var=$1 
	if ! test -d "$var" ; then
		var=$(eval echo \$${var})
	fi
	builtin cd "$var"
	chpwd "$var"
}
function cd_csh {
	typeset d t=$1

	[[ $t = ~* ]] && t=$DIRSTACKBASE${t#~}
	if ! d=$(builtin cd "$t" 2>&1); then
		print -u2 "${1}: ${d##*$t - }."
		return 1
	fi
	cd "$t"
}
function dirs {
	typeset d
	typeset -i isnoglob=0 fl=0 fv=0 fn=0 cpos=0

	[[ $(set +o) == *-o\ noglob* ]] && isnoglob=1
	set -o noglob
	while getopts ":lvn" d; do
		case $d {
		(l)	fl=1 ;;
		(v)	fv=1 ;;
		(n)	fn=1 ;;
		(*)	print -u2 'Usage: dirs [-lvn].'
			return 1 ;;
		}
	done
	shift $((OPTIND - 1))
	if (( $# > 0 )); then
		print -u2 'Usage: dirs [-lvn].'
		return 1
	fi
	if (( fv )); then
		fv=0
		while (( fv < ${#DIRSTACK[*]} )); do
			d=${DIRSTACK[fv]}
			[[ $fl$d = 1~* ]] && d=$DIRSTACKBASE${d#~}
			print -r -- "$fv	$d"
			let fv++
		done
	else
		fv=0
		while (( fv < ${#DIRSTACK[*]} )); do
			d=${DIRSTACK[fv]}
			[[ $fl$d = 1~* ]] && d=$DIRSTACKBASE${d#~}
			if (( fn && (cpos+=${#d}+1) >= 79 && ${#d} < 80 )); then
				print
				(( cpos = ${#d} + 1 ))
			fi
			print -nr -- "$d "
			let fv++
		done
		print
	fi
	(( isnoglob )) || set +o noglob
	return 0
}
function popd {
	typeset d fa
	typeset -i isnoglob=0 n=1

	[[ $(set +o) == *-o\ noglob* ]] && isnoglob=1
	set -o noglob
	while getopts ":0123456789lvn" d; do
		case $d {
		(l|v|n)	fa="$fa -$d" ;;
		(+*)	n=2
			break ;;
		(*)	print -u2 'Usage: popd [-lvn] [+<n>].'
			return 1 ;;
		}
	done
	shift $((OPTIND - n))
	n=0
	if (( $# > 1 )); then
		print -u2 popd: Too many arguments.
		return 1
	elif [[ $1 = ++([0-9]) && $1 != +0 ]]; then
		if (( (n = ${1#+}) >= ${#DIRSTACK[*]} )); then
			print -u2 popd: Directory stack not that deep.
			return 1
		fi
	elif [[ -n $1 ]]; then
		print -u2 popd: Bad directory.
		return 1
	fi
	if (( ${#DIRSTACK[*]} < 2 )); then
		print -u2 popd: Directory stack empty.
		return 1
	fi
	unset DIRSTACK[n]
	set -A DIRSTACK -- "${DIRSTACK[@]}"
	cd_csh "${DIRSTACK[0]}" || return 1
	(( isnoglob )) || set +o noglob
	dirs $fa
}
function pushd {
	typeset d fa
	typeset -i isnoglob=0 n=1

	[[ $(set +o) == *-o\ noglob* ]] && isnoglob=1
	set -o noglob
	while getopts ":0123456789lvn" d; do
		case $d {
		(l|v|n)	fa="$fa -$d" ;;
		(+*)	n=2
			break ;;
		(*)	print -u2 'Usage: pushd [-lvn] [<dir>|+<n>].'
			return 1 ;;
		}
	done
	shift $((OPTIND - n))
	if (( $# == 0 )); then
		if (( ${#DIRSTACK[*]} < 2 )); then
			print -u2 pushd: No other directory.
			return 1
		fi
		d=${DIRSTACK[1]}
		DIRSTACK[1]=${DIRSTACK[0]}
		cd_csh "$d" || return 1
	elif (( $# > 1 )); then
		print -u2 pushd: Too many arguments.
		return 1
	elif [[ $1 = ++([0-9]) && $1 != +0 ]]; then
		if (( (n = ${1#+}) >= ${#DIRSTACK[*]} )); then
			print -u2 pushd: Directory stack not that deep.
			return 1
		fi
		while (( n-- )); do
			d=${DIRSTACK[0]}
			unset DIRSTACK[0]
			set -A DIRSTACK -- "${DIRSTACK[@]}" "$d"
		done
		cd_csh "${DIRSTACK[0]}" || return 1
	else
		set -A DIRSTACK -- placeholder "${DIRSTACK[@]}"
		cd_csh "$1" || return 1
	fi
	(( isnoglob )) || set +o noglob
	dirs $fa
}

# strip comments (and leading/trailing whitespace if IFS is set) from
# any file(s) given as argument, or stdin if none, and spew to stdout
function Lstripcom {
	cat "$@" | { set -o noglob; while read _line; do
		_line=${_line%%#*}
		[[ -n $_line ]] && print -r -- $_line
	done; }
}

: place customsations above this line!
